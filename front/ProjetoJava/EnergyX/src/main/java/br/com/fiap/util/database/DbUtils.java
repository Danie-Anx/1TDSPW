package br.com.fiap.util.database;

import br.com.fiap.util.GeneralUtils;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

public class DbUtils {
    public static String getTableName(Class<?> typeClass) throws Exception {
        if (!typeClass.isAnnotationPresent(DbTable.class)) {
            throw new Exception("A classe '" + typeClass.getName() + "' não está anotada com @DbTable");
        }
        DbTable tabela = typeClass.getAnnotation(DbTable.class);
        return tabela.value();
    }
    public static String generateTableDdl(Class<?> typeClass) throws Exception {
        if (!typeClass.isAnnotationPresent(DbTable.class)) {
            return null;
        }

        String header = "CREATE TABLE " + getTableName(typeClass);

        // TODO: validar constraints (padroes)
        String fieldsDdl = generateFieldsDdl(typeClass);

        String ddl = header + "(" + fieldsDdl + ")";
        return ddl;
    }

    private static String generateFieldsDdl (Class<?> typeClass) throws Exception {
        if (!typeClass.isAnnotationPresent(DbTable.class)) {
            return null;
        }

        ArrayList<DbColumnObject> columns = getTableColumns(typeClass);

        ArrayList<String> parts = new ArrayList<>();

        for (DbColumnObject column : columns) {
            String part = generateFieldDdlPart(column);

            parts.add(part);
        }

        for (DbColumnObject column : columns) {
            if (column.getForeignKeyReference() != null) {
                String constraint = "FOREIGN KEY ( " + column.getName() + " ) REFERENCES " +
                        column.getForeignKeyReference().getTableName() + " ( " + column.getForeignKeyReference().getName() + " )";
                parts.add(constraint);
            }
        }

        return String.join(", ", parts);
    }

    private static String generateFieldDdlPart(DbColumnObject column) {
        String part = column.getName() + " " + column.getType();

        if (column.isPrimaryKey()) {
            if (column.isGeneratedByDefault()) {
                part += " GENERATED BY DEFAULT AS IDENTITY";
            }
            part += " PRIMARY KEY";
        }
        else {
            if (column.isNotNull()) {
                part += " NOT NULL";
            }
            if (column.isUnique()) {
                part += " UNIQUE";
            }
        }
        return part;
    }

    public static ArrayList<DbColumnObject> getTableColumns (Class<?> typeClass) throws Exception {
        ArrayList<DbColumnObject> dbColumnObjectList = new ArrayList<>();
        String tableName = getTableName(typeClass);

        Field[] fields = typeClass.getDeclaredFields();
        for (Field field : fields) {
            if (field.isAnnotationPresent(DbColumn.class)) {
                DbColumn dbColumn = field.getAnnotation(DbColumn.class);

                DbColumnObject dbColumnObject = new DbColumnObject();

                dbColumnObject.setTableName(tableName);
                dbColumnObject.setRelatedField(field);

                if (GeneralUtils.isNotNullAndNotBlank(dbColumn.name())) {
                    dbColumnObject.setName(dbColumn.name());
                }
                else {
                    dbColumnObject.setName(
                            GeneralUtils.camelCaseToSnakeCase(
                                    field.getName()
                            )
                    );
                }

                if (GeneralUtils.isNotNullAndNotBlank(dbColumn.type())) {
                    dbColumnObject.setType(dbColumn.type());
                }
                else {
                    dbColumnObject.setType(
                            getDefaultSqlTypeFromJavaType(field.getType())
                    );
                }

                dbColumnObject.setPrimaryKey(dbColumn.primaryKey());
                dbColumnObject.setGeneratedByDefault(dbColumn.generatedByDefault());

                if (GeneralUtils.isNotNullAndNotBlank(dbColumn.foreignKey())) {
                    String referencedTableName = dbColumn.foreignKey();

                    Class<?> foreignKeyType = field.getType();

                    DbColumnObject referencedPrimaryKey = DbUtils.getPrimaryKeyColumn(foreignKeyType);

                    if (referencedPrimaryKey == null) {
                        throw new Exception("Foreign key inválida");
                    }

                    dbColumnObject.setName(referencedTableName + "_" + referencedPrimaryKey.getName());
                    dbColumnObject.setType(referencedPrimaryKey.getType());
                    dbColumnObject.setForeignKeyReference(referencedPrimaryKey);
                }
                else {
                    dbColumnObject.setForeignKeyReference(null);
                }

                dbColumnObject.setNotNull(dbColumn.notNull());
                dbColumnObject.setUnique(dbColumn.unique());

                // Validacoes
                if (dbColumnObject.isGeneratedByDefault() && !dbColumnObject.getType().equals("INTEGER")) {
                    throw new Exception("Colunas auto geradas devem ser do tipo Integer");
                }

                if (dbColumnObject.isGeneratedByDefault() && !dbColumnObject.isPrimaryKey()) {
                    throw new Exception("Colunas auto geradas devem ser chaves primárias");
                }

                if (
                        dbColumnObject.isGeneratedByDefault() &&
                        dbColumnObjectList.stream().anyMatch(DbColumnObject::isGeneratedByDefault)
                ) {
                    throw new Exception("Só pode existir uma coluna auto gerada por tabela");
                }

                dbColumnObjectList.add(dbColumnObject);
            }
        }

        // Colocando em ordem alfabética pelo nome da coluna para garantir que o retorno seja consistente, sempre com a mesma ordem
        dbColumnObjectList.sort(Comparator.comparing(DbColumnObject::getName));

        return dbColumnObjectList;
    }

    public static DbColumnObject getGeneratedColumn (Class<?> typeClass) throws Exception {
        ArrayList<DbColumnObject> columns = getTableColumns(typeClass);

        for (DbColumnObject column : columns) {
            if (column.isGeneratedByDefault()) {
                return column;
            }
        }

        return null;
    }

    public static DbColumnObject getPrimaryKeyColumn (Class<?> typeClass) throws Exception {
        ArrayList<DbColumnObject> columns = getTableColumns(typeClass);

        for (DbColumnObject column : columns) {
            if (column.isPrimaryKey()) {
                return column;
            }
        }

        return null;
    }

    public static ArrayList<DbColumnObject> getNonGeneratedColumns (Class<?> typeClass) throws Exception {
        ArrayList<DbColumnObject> nonGeneratedColumns = new ArrayList<>();

        ArrayList<DbColumnObject> columns = getTableColumns(typeClass);

        for (DbColumnObject column : columns) {
            if (!column.isGeneratedByDefault()) {
                nonGeneratedColumns.add(column);
            }
        }

        return nonGeneratedColumns;
    }

    public static ArrayList<DbColumnObject> getNonPrimaryKeyColumns (Class<?> typeClass) throws Exception {
        ArrayList<DbColumnObject> nonPrimaryKeyColumns = new ArrayList<>();

        ArrayList<DbColumnObject> columns = getTableColumns(typeClass);

        for (DbColumnObject column : columns) {
            if (!column.isPrimaryKey()) {
                nonPrimaryKeyColumns.add(column);
            }
        }

        return nonPrimaryKeyColumns;
    }

    private static String getDefaultSqlTypeFromJavaType (Class<?> javaTypeClass) {
        String javaTypeName = javaTypeClass.getName();
        switch (javaTypeName) {
            case "java.lang.String":
                return "VARCHAR(255)";
            case "int":
            case "java.lang.Integer":
                return "INTEGER";
            case "double":
            case "java.lang.Double":
                return "NUMBER(20,2)";
            case "java.time.LocalDate":
            case "java.time.LocalDateTime":
                return "DATE";
            default:
                return "ANYDATA";
        }
    }

    public static String getDefaultResultSetGetterFromJavaType (Class<?> javaTypeClass) {
        String javaTypeName = javaTypeClass.getName();
        switch (javaTypeName) {
            case "java.lang.String":
                return "getString";
            case "int":
            case "java.lang.Integer":
                return "getInt";
            case "double":
            case "java.lang.Double":
                return "getDouble";
            case "java.time.LocalDate":
            case "java.time.LocalDateTime":
                return "getTimestamp";
            default:
                return "getObject";
        }
    }

    public static String generateInsertDml (Class<?> typeClass) throws Exception {
        if (!typeClass.isAnnotationPresent(DbTable.class)) {
            return null;
        }

        String header = "INSERT INTO " + getTableName(typeClass);

        ArrayList<DbColumnObject> columns = getNonGeneratedColumns(typeClass);

        if (columns.size() == 0) {
            throw new Exception("Não há colunas para inserir");
        }

        ArrayList<String> columnNames = new ArrayList<>();

        for (DbColumnObject column : columns) {
            columnNames.add(column.getName());
        }

        String[] placeholders = new String[columns.size()];
        Arrays.fill(placeholders, "?");

        String dml = header + " ( " + String.join(", ", columnNames) + " ) VALUES (" + String.join(", ", placeholders) + ")";
        return dml;
    }

    public static String generateSelectAllDql (Class<?> typeClass) throws Exception {
        if (!typeClass.isAnnotationPresent(DbTable.class)) {
            return null;
        }

        String tableName = getTableName(typeClass);

        String dql = "SELECT * FROM " + tableName;
        return dql;
    }

    private static String generateWhereById (Class<?> typeClass) throws  Exception {
        if (!typeClass.isAnnotationPresent(DbTable.class)) {
            return null;
        }

        DbColumnObject primaryKeyColumn = getPrimaryKeyColumn(typeClass);

        if (primaryKeyColumn == null) {
            String tableName = getTableName(typeClass);
            throw new Exception("Não há chave primária na tabela: " + tableName);
        }

        String primaryKeyColumnName = primaryKeyColumn.getName();

        return "WHERE " + primaryKeyColumnName + " = ?";
    }

    public static String generateSelectByIdDql (Class<?> typeClass) throws Exception {
        if (!typeClass.isAnnotationPresent(DbTable.class)) {
            return null;
        }

        String dql = generateSelectAllDql(typeClass) + " " + generateWhereById(typeClass);
        return dql;
    }

    public static String generateUpdateDml (Class<?> typeClass) throws Exception {
        if (!typeClass.isAnnotationPresent(DbTable.class)) {
            return null;
        }

        String header = "UPDATE " + getTableName(typeClass) + " SET";

        ArrayList<DbColumnObject> columns = getNonPrimaryKeyColumns(typeClass);

        if (columns.size() == 0) {
            throw new Exception("Não há colunas para atualizar");
        }

        ArrayList<String> parts = new ArrayList<>();

        for (DbColumnObject column : columns) {
            String part = column.getName() + " = ?";
            parts.add(part);
        }

        String dml = header + " " + String.join(", ", parts) + " " + generateWhereById(typeClass);
        return dml;
    }

    public static String generateDeleteDml (Class<?> typeClass) throws Exception {
        if (!typeClass.isAnnotationPresent(DbTable.class)) {
            return null;
        }

        String dml ="DELETE FROM " + getTableName(typeClass) + " " + generateWhereById(typeClass);
        return dml;
    }
}
